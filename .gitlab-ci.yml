# This file is a template, and might need editing before it works on your project.
# see https://docs.gitlab.com/ce/ci/yaml/README.html for all available options

variables:
  GIT_SUBMODULE_STRATEGY: "recursive"

stages:
  - build
  - deploy

documentation:
  tags:
    - debian, docker
  stage: build
  image:
    name: ${CI_REGISTRY}/internal/docker-sphinx:update-to-sphinx-3
  script:
    - cd docu/doxygen
    - doxygen
    - cp -r xml ../sphinx/source
    - cd ../sphinx
    - make html
  artifacts:
    paths:
      - docu/sphinx/build/html

testing-v6:
  stage: build
  tags:
    - debian, docker
  image:
    name: ${CI_REGISTRY}/internal/docker-igorpro:v6
  script:
    - ln -rs procedures "/home/igor/WaveMetrics/Igor Pro 6 User Files/User Procedures/utf"
    - ln -rs tests "/home/igor/WaveMetrics/Igor Pro 6 User Files/User Procedures/tests"
    - touch tests/DO_AUTORUN.TXT
    - igorpro execute --verbose --screenshot "tests/VeryTinyTestEnvironment.pxp"
      # generate a proper exit value
    - exit $(grep "errors\|failures=\"[0-9]\+\"" tests/JU_*.xml | grep -cv "failures=\"0\" errors=\"0\"")
  artifacts:
    when: always
    reports:
      junit: tests/JU_*.xml
    paths:
      - tests/JU_*.xml
      - screenshot/*.png

testing-v7:
  stage: build
  tags:
    - debian, docker
  image:
    name: ${CI_REGISTRY}/internal/docker-igorpro:v7
  script:
    - ln -rs procedures "/home/igor/WaveMetrics/Igor Pro 7 User Files/User Procedures/utf"
    - ln -rs tests "/home/igor/WaveMetrics/Igor Pro 7 User Files/User Procedures/tests"
    - touch tests/DO_AUTORUN.TXT
    - igorpro execute --verbose --screenshot "tests/VeryTinyTestEnvironment.pxp"
      # generate a proper exit value
    - exit $(grep "errors\|failures=\"[0-9]\+\"" tests/JU_*.xml | grep -cv "failures=\"0\" errors=\"0\"")
  artifacts:
    when: always
    reports:
      junit: tests/JU_*.xml
    paths:
      - tests/JU_*.xml
      - screenshot/*.png

testing-v8:
  stage: build
  tags:
    - debian, docker
  image:
    name: ${CI_REGISTRY}/internal/docker-igorpro:v8
  script:
    - ln -rs procedures "/home/igor/WaveMetrics/Igor Pro 8 User Files/User Procedures/utf"
    - ln -rs tests "/home/igor/WaveMetrics/Igor Pro 8 User Files/User Procedures/tests"
    - touch tests/DO_AUTORUN.TXT
    - igorpro execute --verbose --screenshot "tests/VeryTinyTestEnvironment.pxp"
      # generate a proper exit value
    - exit $(grep "errors\|failures=\"[0-9]\+\"" tests/JU_*.xml | grep -cv "failures=\"0\" errors=\"0\"")
  artifacts:
    when: always
    reports:
      junit: tests/JU_*.xml
    paths:
      - tests/JU_*.xml
      - screenshot/*.png

testing-v9:
  stage: build
  tags:
    - debian, docker
  image:
    name: ${CI_REGISTRY}/internal/docker-igorpro:v9
  script:
    - ln -rs procedures "/home/igor/WaveMetrics/Igor Pro 9 User Files/User Procedures/utf"
    - ln -rs tests "/home/igor/WaveMetrics/Igor Pro 9 User Files/User Procedures/tests"
    - touch tests/DO_AUTORUN.TXT
    - igorpro execute --verbose --screenshot "tests/VeryTinyTestEnvironment.pxp"
      # generate a proper exit value
    - exit $(grep "errors\|failures=\"[0-9]\+\"" tests/JU_*.xml | grep -cv "failures=\"0\" errors=\"0\"")
  artifacts:
    when: always
    reports:
      junit: tests/JU_*.xml
    paths:
      - tests/JU_*.xml
      - screenshot/*.png

deployment_staging:
  when: manual
  tags:
    - debian, docker
  stage: deploy
  image:
    name: ${CI_REGISTRY}/internal/docker-utils:latest
  script:
    - cd docu/sphinx
    - lftp -e "mirror --reverse -n -e build/html /igor-unit-testing-framework; bye" -u $FTP_USER_DOCS_STAGING,$FTP_PW_DOCS_STAGING byte-physics.de
  dependencies:
    - documentation

deployment:
  only:
    - master
  tags:
    - debian, docker
  stage: deploy
  image:
    name: ${CI_REGISTRY}/internal/docker-utils:latest
  script:
    - cd docu/sphinx
    - lftp -e "mirror --reverse -n -e build/html /igor-unit-testing-framework; bye" -u $FTP_USER_DOCS,$FTP_PW_DOCS byte-physics.de
  dependencies:
    - documentation
