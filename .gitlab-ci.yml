# This file is a template, and might need editing before it works on your project.
# see https://docs.gitlab.com/ce/ci/yaml/README.html for all available options

default:
  timeout: 3 minutes
  retry:
    max: 1
    when:
      - stuck_or_timeout_failure

pre-commit:
  tags:
    - debian, docker, amd64
  variables:
    DOCKER_AUTH_CONFIG: "${DOCKER_AUTH_CONFIG_UTILS}"
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  image:
    name: ${CI_REGISTRY}/internal/docker-utils:latest
  script:
    - pre-commit run --all-files --show-diff-on-failure
  cache:
    paths:
      - ${PRE_COMMIT_HOME}

documentation:
  tags:
    - debian, docker, amd64
  variables:
    DOCKER_AUTH_CONFIG: "${DOCKER_AUTH_CONFIG_SPHINX}"
    GIT_SUBMODULE_STRATEGY: "recursive"
  image:
    name: ${CI_REGISTRY}/internal/docker-sphinx:latest
  script:
    - cd docu/doxygen
    - doxygen
    - cp -r xml ../sphinx/source
    - cd ../sphinx
    - make html
    - cd ../..
    - DOXYGEN_LOG=docu/doxygen/doxygen.log
    - if [[ -s ${DOXYGEN_LOG} ]]; then cat ${DOXYGEN_LOG}; exit 1; fi
    - SPHINX_LOG=docu/sphinx/sphinx.log
    - if [[ -s ${SPHINX_LOG} ]]; then cat ${SPHINX_LOG}; exit 1; fi
  artifacts:
    when: always
    paths:
      - docu/sphinx/build/html
      - docu/doxygen/doxygen.log
      - docu/sphinx/sphinx.log

testing:
  tags:
    - debian, docker, amd64
  parallel:
    matrix:
      - IGOR_VERSION:
          - 6
          - 7
          - 8
          - 9
        ARCHITECTURE:
          - x86
          - x64
        EXPERIMENT:
          - VeryTinyTestEnvironment.pxp
          - Various.pxp
          - UnitTests/UnitTests.pxp
          # - IMUnitTests/IMUnitTests.pxp
          - TestResultsTests/ResultsTest.pxp
          - DebugModeTests.pxp
  variables:
    DOCKER_AUTH_CONFIG: "${DOCKER_AUTH_CONFIG_IGOR_PRO}"
  rules:
    - if: '$ARCHITECTURE == "x64"'
      variables:
        IGORTARGET: ""
        IGOREXTPATH: "Igor Extensions (64-bit)"
    - if: '$ARCHITECTURE == "x86"'
      variables:
        IGORTARGET: "--32bit"
        IGOREXTPATH: "Igor Extensions"
  image:
    name: ${CI_REGISTRY}/internal/docker-igorpro:v${IGOR_VERSION}
  script:
    - test ${IGOR_VERSION} = "9" && mkdir -p "/home/igor/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/${IGOREXTPATH}" || true
    - test ${IGOR_VERSION} = "9" && ln -rs xop/*.xop "/home/igor/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/${IGOREXTPATH}" || true
    - ln -rs procedures "/home/igor/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/User Procedures/iutf"
    - ln -rs tests "/home/igor/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/User Procedures/tests"
    - touch "$(dirname "tests/$EXPERIMENT")/DO_AUTORUN.TXT"
    - |
      echo "COBERTURA_SOURCES=C:\\users\\igor\\My Documents\\WaveMetrics\\Igor Pro ${IGOR_VERSION} User Files\\User Procedures\\" \
        > "$(dirname "tests/$EXPERIMENT")/TEST_VARS.TXT"
    - igorpro execute ${IGORTARGET} --screenshot "tests/${EXPERIMENT}"
    - if [[ "$(find tests -name "JU_*.xml" | wc -l)" == "0" ]]; then exit 1; fi
    - exit $(grep -e "errors=\"[0-9]\+\"" -e "failures=\"[0-9]\+\"" tests/**/JU_*.xml | grep -cv "failures=\"0\" errors=\"0\"")
  artifacts:
    when: always
    reports:
      junit: tests/**/JU_*.xml
      coverage_report:
        coverage_format: cobertura
        path: tests/**/Cobertura_*.xml
    paths:
      - tests/**/*.htm
      - tests/**/*.log
      - tests/**/JU_*.xml
      - tests/**/Cobertura_*.xml
      - screenshot/**/*.png

testing_nightly:
  tags:
    - debian, docker, amd64
  parallel:
    matrix:
      - IGOR_VERSION:
          - 9
        ARCHITECTURE:
          - x86
          - x64
        EXPERIMENT:
          - VeryTinyTestEnvironment.pxp
          - Various.pxp
          - UnitTests/UnitTests.pxp
          # - IMUnitTests/IMUnitTests.pxp
          - Tracing.pxp
          - TestResultsTests/ResultsTest.pxp
          - DebugModeTests.pxp
  variables:
    DOCKER_AUTH_CONFIG: "${DOCKER_AUTH_CONFIG_IGOR_PRO}"
  rules:
    - if: '$ARCHITECTURE == "x64"'
      variables:
        IGORTARGET: ""
        IGOREXTPATH: "Igor Extensions (64-bit)"
    - if: '$ARCHITECTURE == "x86"'
      variables:
        IGORTARGET: "--32bit"
        IGOREXTPATH: "Igor Extensions"
  image:
    name: ${CI_REGISTRY}/internal/docker-igorpro:nightly
  script:
    - mkdir -p "/home/igor/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/${IGOREXTPATH}"
    - ln -rs xop/*.xop "/home/igor/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/${IGOREXTPATH}"
    - ln -rs procedures "/home/igor/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/User Procedures/iutf"
    - ln -rs tests "/home/igor/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/User Procedures/tests"
    - touch "$(dirname "tests/$EXPERIMENT")/DO_AUTORUN.TXT"
    - |
      echo "COBERTURA_SOURCES=C:\\users\\igor\\My Documents\\WaveMetrics\\Igor Pro ${IGOR_VERSION} User Files\\User Procedures\\" \
        > "$(dirname "tests/$EXPERIMENT")/TEST_VARS.TXT"
    - igorpro execute ${IGORTARGET} --screenshot --verbose "tests/${EXPERIMENT}"
    - if [[ "$(find tests -name "JU_*.xml" | wc -l)" == "0" ]]; then exit 1; fi
    - exit $(grep -e "errors=\"[0-9]\+\"" -e "failures=\"[0-9]\+\"" tests/**/JU_*.xml | grep -cv "failures=\"0\" errors=\"0\"")
  artifacts:
    when: always
    reports:
      junit: tests/**/JU_*.xml
      coverage_report:
        coverage_format: cobertura
        path: tests/**/Cobertura_*.xml
    paths:
      - tests/**/*.htm
      - tests/**/*.log
      - tests/**/JU_*.xml
      - tests/**/Cobertura_*.xml
      - screenshot/**/*.png

testing_macosx:
  tags:
    - macosx, igorpro, sonoma, arm64
  variables:
    GIT_SUBMODULE_STRATEGY: "recursive"
  parallel:
    matrix:
      - IGOR_VERSION:
          - 8
          - 9
        EXPERIMENT:
          - VeryTinyTestEnvironment.pxp
          - Various.pxp
          - UnitTests/UnitTests.pxp
          - IMUnitTests/IMUnitTests.pxp
          - Tracing.pxp
          - TestResultsTests/ResultsTest.pxp
          - DebugModeTests.pxp
  script:
    - |
      if [[ "$IGOR_VERSION" = "8" ]] && [[ "$EXPERIMENT" == "Tracing.pxp" ]]; then
        echo "SKIP UNSUPPORTED TEST"
        exit 0
      fi
    - rm -rf "$HOME/Documents/WaveMetrics"
    - mkdir -p "$HOME/Documents/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/Igor Extensions (64-bit)"
    - ln -s $(pwd)/xop/*.xop "$HOME/Documents/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/Igor Extensions (64-bit)"
    - mkdir -p "$HOME/Documents/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/User Procedures"
    - ln -s $(pwd)/procedures "$HOME/Documents/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/User Procedures/iutf"
    - ln -s $(pwd)/tests "$HOME/Documents/WaveMetrics/Igor Pro ${IGOR_VERSION} User Files/User Procedures/tests"
    - touch "$(dirname "tests/$EXPERIMENT")/DO_AUTORUN.TXT"
    - |
      echo "COBERTURA_SOURCES=Macintosh HD$(pwd | sed "s@/@:@g")" \
        > "$(dirname "tests/$EXPERIMENT")/TEST_VARS.TXT"
    - pwd
    - /Applications/Igor\ Pro\ ${IGOR_VERSION}\ Folder/Igor64.app/Contents/MacOS/Igor64 /CompErrNoDialog /I tests/${EXPERIMENT}
    - cd $(dirname "tests/$EXPERIMENT")
    - if [[ "$(find . -name "JU_*.xml" | wc -l)" == "0" ]]; then exit 1; fi
    - exit $(grep "errors\|failures=\"[0-9]\+\"" JU_*.xml | grep -cv "failures=\"0\" errors=\"0\"")
  artifacts:
    when: always
    reports:
      junit: tests/**/JU_*.xml
      coverage_report:
        coverage_format: cobertura
        path: tests/**/Cobertura_*.xml
    paths:
      - tests/**/*.log
      - tests/**/JU_*.xml
      - tests/**/Cobertura_*.xml
      - screenshot/**/*.png

xml_verification:
  tags:
    - debian, docker, amd64
  image:
    name: ${CI_REGISTRY}/internal/docker-utils:latest
  variables:
    DOCKER_AUTH_CONFIG: "${DOCKER_AUTH_CONFIG_UTILS}"
  script:
    - cd tests
    - ./check-junit-xml-files.sh
  needs:
    - testing
    - testing_nightly
    - testing_macosx

generate_reports:
  tags:
    - debian, docker, amd64
  image:
    name: ${CI_REGISTRY}/internal/docker-utils:latest
  variables:
    DOCKER_AUTH_CONFIG: "${DOCKER_AUTH_CONFIG_UTILS}"
  script:
    - report_tag="$(git tag --points-at HEAD | head -n 1)"
    - if [ -z "$report_tag" ]; then report_tag="$(git rev-parse --abbrev-ref HEAD)"; fi
    - if [ -z "$report_tag" ] || [[ "$report_tag" == "HEAD" ]]; then report_tag="$(git rev-parse --short HEAD)"; fi
    - |
      for file in $(find . -name "Cobertura_*.xml"); do
        sed -i -r "s@<source>.*</source>@<source>$(pwd)/</source>@" "$file"
        sed -i 's@name="iutf@name="procedures@g' "$file"
      done
    - |
      reportgenerator \
        -reports:**/Cobertura_*.xml \
        -targetdir:report \
        "-reporttypes:Html;Badges" \
        -verbosity:Info \
        "-title:Igor Pro Universal Testing Framework" \
        "-tag:$report_tag" \
        --riskHotspotsAnalysisThresholds:metricThresholdForCyclomaticComplexity=20
  needs:
    - testing
    - testing_nightly
    - testing_macosx
  artifacts:
    when: always
    paths:
      - report/**/*

deployment_staging:
  when: manual
  tags:
    - debian, docker, amd64
  image:
    name: ${CI_REGISTRY}/internal/docker-utils:latest
  timeout: 10 minutes
  variables:
    DOCKER_AUTH_CONFIG: "${DOCKER_AUTH_CONFIG_UTILS}"
  script:
    - mv report docu/sphinx/build/html/
    - cd docu/sphinx
    - lftp -e "mirror --reverse -n -e build/html /igortest; bye" -u $FTP_USER_DOCS_STAGING,$FTP_PW_DOCS_STAGING byte-physics.de
  needs:
    - documentation
    - generate_reports

deployment:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
  tags:
    - debian, docker, amd64
  image:
    name: ${CI_REGISTRY}/internal/docker-utils:latest
  timeout: 10 minutes
  variables:
    DOCKER_AUTH_CONFIG: "${DOCKER_AUTH_CONFIG_UTILS}"
  script:
    - mv report docu/sphinx/build/html/
    - cd docu/sphinx
    - lftp -e "mirror --reverse -n -e build/html /igortest; bye" -u $FTP_USER_DOCS,$FTP_PW_DOCS byte-physics.de
  needs:
    - documentation
    - job: testing
      artifacts: false
    - job: testing_nightly
      artifacts: false
    - job: testing_macosx
      artifacts: false
    - job: pre-commit
      artifacts: false
    - generate_reports
